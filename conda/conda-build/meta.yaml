{% set name = "cunumeric" %}
## The placeholder version is strictly for making two-pass conda build process.
## It should not be used for any other purpose, and this is not a default version.
{% set placeholder_version = '0.0.0.dev' %}
{% set default_cuda_version = '11.5' %}
{% set cuda_version='.'.join(environ.get('CUDA', default_cuda_version).split('.')[:2]) %}
{% set cuda_major=cuda_version.split('.')[0] %}
{% set py_version=environ.get('CONDA_PY', '') %}
{% if package_version is defined %}
    {% set version = package_version %}
    {% set core_version = version %}
## The tag must be in one of the two formats (where N is a digit):
## vNN.NN.NN
## vNN.NN.NN.dev

## Note: default values are only given to make conda build work. They should not be necessary in principle.
{% elif 'dev' in environ.get('GIT_DESCRIBE_TAG', placeholder_version) %}
    {% set version = (environ.get('GIT_DESCRIBE_TAG', placeholder_version) ~ environ.get('GIT_DESCRIBE_NUMBER', '')).lstrip('v') %}
    {% set core_version = (version.rsplit('.',1)[0] ~ ".dev" ~ "|>=" ~ version.rsplit('.',1)[0]) %}
{% else %}
    {% set version = environ.get('GIT_DESCRIBE_TAG', placeholder_version).lstrip('v') %}
    {% set core_version = version %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
{% if package_tar is defined %}
  url: {{ package_tar }}
{% else %}
  git_url: ../../
{% endif %}

build:
  skip: true # [not linux]
  number: {{ GIT_DESCRIBE_NUMBER }}
  missing_dso_whitelist:
    -  '*libcuda.so*'
  string: "cuda{{ cuda_major }}_py{{ py_version }}_{{ GIT_DESCRIBE_HASH }}_{{ PKG_BUILDNUM }}"

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}
    - make
    - sysroot_linux-64 2.17  # [linux64]
  host:
    - python
    - cuda-compiler >={{ cuda_version }}
    - cuda-libraries-dev >={{ cuda_version }}
    - cudatoolkit >={{ cuda_version }}
    - cutensor >=1.3
    - opt_einsum >=3.3
    - legate-core >={{ core_version }}
  run:
    - python
    - cudatoolkit >={{ cuda_version }}
    - numpy
    - cutensor >=1.3
    - opt_einsum >=3.3
    - scipy
    - legate-core >={{ core_version }}
    
  run_constrained:
    - __cuda >=8.0
    - __glibc >=2.17  # [linux]

test:
  source_files:
    - test.py
    - tests
    - examples
  commands:
    - legate -c "import cunumeric"

about:
  home: https://github.com/nv-legate/cunumeric
  license: Apache-2.0
  license_file: LICENSE
  summary: 'Drop-in Replacment for NumPy'
  description: |
    cuNumeric is a Legate library that aims to provide
    a distributed and accelerated drop-in replacement
    for the NumPy API on top of the Legion runtime.
  doc_url: https://github.com/nv-legate/cunumeric
  dev_url: https://github.com/nv-legate/cunumeric

extra:
  recipe-maintainers:
    - m3vaz